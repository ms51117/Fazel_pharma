"""fix_gender_enum_to_use_english_values

Revision ID: c1238302bb77
Revises: ce9dd98e770e
Create Date: 2025-10-07 12:32:47.210566

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql



# revision identifiers, used by Alembic.
revision: str = 'c1238302bb77'
down_revision: Union[str, Sequence[str], None] = 'ce9dd98e770e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Define the new ENUM type with correct (english) values.
new_gender_enum = postgresql.ENUM('male', 'female', name='gender_enum')
# Define the old ENUM type to be used in the downgrade function.
old_gender_enum = postgresql.ENUM('مرد', 'زن', name='gender_enum')


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Alter the column to a temporary VARCHAR to remove dependency on the old ENUM.
    # Note: We use 'create_type=False' because we don't want to create the 'gender_enum' type here,
    # we just want to reference it for the `existing_type`.
    op.alter_column('tbl_Patient', 'sex',
                    existing_type=postgresql.ENUM('مرد', 'زن', name='gender_enum', create_type=False),
                    type_=sa.VARCHAR(length=10),
                    existing_nullable=True)

    # Step 2: Drop the old ENUM type from the database.
    op.execute('DROP TYPE gender_enum;')

    # Step 3: Create the new ENUM type with English values.
    new_gender_enum.create(op.get_bind())

    # Step 4: Alter the column back to the new ENUM type.
    # `postgresql_using` tells PostgreSQL how to cast the existing data (if any) to the new type.
    op.alter_column('tbl_Patient', 'sex',
                    existing_type=sa.VARCHAR(length=10),
                    type_=new_gender_enum,
                    existing_nullable=True,
                    postgresql_using='sex::gender_enum')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # This is the reverse process of the upgrade function.

    # Step 1: Alter the column to a temporary VARCHAR to remove dependency on the new ENUM.
    op.alter_column('tbl_Patient', 'sex',
                    existing_type=new_gender_enum,
                    type_=sa.VARCHAR(length=10),
                    existing_nullable=True)

    # Step 2: Drop the new ENUM type.
    op.execute('DROP TYPE gender_enum;')

    # Step 3: Re-create the old ENUM type with Farsi values.
    old_gender_enum.create(op.get_bind())

    # Step 4: Alter the column back to the old ENUM type.
    op.alter_column('tbl_Patient', 'sex',
                    existing_type=sa.VARCHAR(length=10),
                    type_=old_gender_enum,
                    existing_nullable=True,
                    postgresql_using='sex::gender_enum')

    # ### end Alembic commands ###